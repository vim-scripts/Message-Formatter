This is a mirror of http://www.vim.org/scripts/script.php?script_id=3552

Given a pattern string and a set of values, replaces the parameters in the pattern with the specified values. The values may be either a Dictionary or a List,
and the expansion can be done recursively or just once, as in the example below.

Example (note the 1 at the end, indicating recursion as fullName is defined as fName and lName):

echo MessageFormatter#FormatMessage( "My name is {fullName} (first name '{fName}', last name '{lName}').", { 'fName': 'john', 'lName': 'smith', 'fullName': '{t_fName} {t_lName}' }, 1 )

Echoes (note how fullName gets further expanded): My name is John Smith (first name 'john', last name 'smith').

Same example, with a 0 at the end (or nothing, as the recursion parameter is optional):

Echoes (note how fullName is not expanded recursively): My name is {t_fName} {t_lName} (first name 'john', last name 'smith').

Same (recursive) example using a List instead of a Dictionary:

echo MessageFormatter#FormatMessage( "My name is {2} (first name '{0}', last name '{1}').", [ 'john', 'smith', '{t_0} {t_1}' ], 1 )

Note: To use an actual '{' or '}', escape it with a backslash.

Observe how some of the parameters start with t_ before the actual name. There are a number of formatting parameters:

a (optional): as is
l: lower case
u: upper case
f: first letter capitalized only
t: title case the entire string
c: camel case: converts 'an interesting phrase' to 'anInterestingPhrase'
C: constant mode: converts 'anInterestingPhrase' or 'an interesting phrase' to 'AN_INTERESTING_PHRASE'
w: from 'anInterestingPhrase' or 'AN_INTERESTING_PHRASE' to 'an intersting phrase'

Both the parameters AND the formatting directives are case-sensitive. If multiple formatting parameters are specified, they will be applied in the order
supplied. For example {c_val} where 'val' is 'some variable' results in 'someVariable'. However, {cf_val} gives 'SomeVariable' because the following 'f'
capitalizes the first letter of the result from 'c' (camel case).

Version 1.5:

Added a cache so repeated expansions of the same variable can be looked up rather than computed (potentially much faster, especially when recursion is on).

Version 2.0:

Added new formatting modifier:

e: Escapes out quotation marks (") and backslashes, leaving the value suitable for placing in quotes. For example, {e_fName} where fName is Jo\nhn results in
Jo\\nhn.

If an expansion parameter starts with "eval ", the rest of the value is evaluated and the return value used as the actual parameter value. If recursion is on,
that value may contain further parameters.

Example:

echo MessageFormatter#FormatMessage('public static final {type} {C_variable} = {value};', {'type':'eval input("Type for {variable}: ", "String")', 'variable':'eval input("Variable name: ")', 'value':'eval input("Value: ", "\"{C_variable}\"")'}, 1)

Bear in mind that 'type' and 'value' both use the parameter 'variable'. If 'variable' were to refer to either of these, you'd have circular recursion. There
is no check in place for that; you'd just end up with a stack overflow.

Note, also, that the expression is evaluated only once. After that, its value is stored on the cache--this allows eval parameters to refer to other eval
parameters (only useful if recursion is on).

