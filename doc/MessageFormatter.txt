*MessageFormatter.txt*       For Vim Version 7.3      Last change: 2011 May 06

TABLE OF CONTENTS                                       *MessageFormatter_toc*

  1. Purpose                                        |MessageFormatter_Purpose|
  2. Usage                                            |MessageFormatter_Usage|
  3. Dependencies                              |MessageFormatter_Dependencies|
  4. Options                                        |MessageFormatter_Options|
  5. Mappings                                      |MessageFormatter_Mappings|
  6. Commands                                      |MessageFormatter_Commands|
  7. Patterns                                      |MessageFormatter_Patterns|
  8. Pattern Modifiers                     |MessageFormatter_PatternModifiers|
  9. Notes                                            |MessageFormatter_Notes|
  10. Special Values                          |MessageFormatter_SpecialValues|
  11. Tips                                             |MessageFormatter_Tips|
  12. Examples                                     |MessageFormatter_Examples|


==============================================================================
PURPOSE                                             *MessageFormatter_Purpose*

This plugin allows the simplification of repetitive code fragments, allowing
much faster entry; for example, this text >
        getset  List<String>  names
<
gets converted to >
        public List<String> getNames()
        {
                return m_names;
        }

        public void setNames( List<String> val )
        {
                m_names = val;
        }
<
More importantly, it figures out when you're defining a boolean variable and
replaces the "get" with "is"; thus, >
        getset  boolean  old enough
<
becomes >
        public boolean isOldEnough()
        {
                return m_oldEnough;
        }

        public void setOldEnough( boolean val )
        {
                m_oldEnough = val;
        }
<
Observe how "old enough" was automatically camel-cased to "oldEnough", and,
when used with "get" or "is", was also capitalized. The same variable can be
used over and over again, each time with (if desired) different formatting
directives; for example, this template pattern >
        My name is {john::f_fName} and my full name is {{fName} smith::uq_fullName}.
<
gets expanded to >
        My name is John and my full name is "JOHN SMITH".
<
Observe, also, how the "fullName" directive recursively contained and expanded
the fName directive.


==============================================================================
USAGE                                                 *MessageFormatter_Usage*

For basic usage, see |MessageFormatter_Commands| and |MessageFormatter_Mappings|.


==============================================================================
DEPENDENCIES                                   *MessageFormatter_Dependencies*

This plugin depends on my GetVar.vim, which may be downloaded from
http://www.vim.org/scripts/script.php?script_id=353. This allows you to set
all the options on a per window, buffer, tab or global basis.


==============================================================================
OPTIONS                                             *MessageFormatter_Options*

                                           *g:MessageFormatter_blankParameter*

If a parameter value is intentionally blank, use this as the value (multiple
whitespace characters get treated as one delimiter, so simply putting extra
spaces instead won't do what you want).

Defaults to the back tick (`).

                                       *g:MessageFormatter_parameterSeparator*

Regular expression used to separate multiple arguments for parameter
expansion.

Defaults to two or more whitespace characters. You could change it to a single
tab, for example.

If no separators are found on the line, it will break the line on a single
space instead. This is useful if the arguments are simple and contain no
whitespace; for example, using the built-in getset: >
        getset boolean someBooleanVariable
<
At the same time, a more complex variation should use two spaces because it
contains spaces within: >
        getset  HashMap<String, String>  some map variable
<
(You can specify the last variable name as a sequence of words; they will
automatically be converted to camel case. Tweak the template definition and
replace the "c_" bit with "Cl_" to get snake case (as in the
|MessageFormatter_Tips| section).

                                               *g:MessageFormatter_jumpMarker*

Defaults to «». Useful if you have a jumping macro system installed (such as
the very good snippetsEmu.vim). The expression "!jump!" In template
definitions will be replaced with this, as will inline template variables so
you can jump from one to the next.

                                   *g:MessageFormatter_createDefaultTemplates*

Defaults to 1. Will install some sample global templates. Use
Listglobaltemplates to get a list of what's available.

                              *g:MessageFormatter_formatCurrentLineAsFallback*

Defaults to 1. If |<Plug>FormatCurrentTemplate| is called when the cursor
isn't in a template previously placed by |<Plug>PlaceTemplateInText|, the
processor will process the current line as an ad-hoc template instead (same as
|<Plug>FormatOneLine|); if this is set to 0 instead, the system will give an
error message.

                                         *g:MessageFormatter_autoAddJumpToEnd*

If set to 1 (the default), and a template contains !jump! Directives, another
one is added to the end of the directive to make it easier to jump to the end
to continue typing. For example, this template ends up with an extra !jump! At
the very end, >
        Addglobaltemplate do do\n{\n!jump!\n} while ( !jump! );
<
while this one does not: >
        Addglobaltemplate safetern ( {::var} == null ? "" : {var} )
<
The mechanism is smart enough to only tweak those templates that don't already
contain a !jump! directive at the very end, so you don't have to tweak legacy
templates. If you only ever want the functionality to be available
selectively, set |g:MessageFormatter_autoAddJumpToEnd| to 0 and add it
manually to those templates where you want it.

                                      *g:MessageFormatter_highlightDirectives*

If 1 (defaults to 1), directives of one of these formats are highlighted: >
        {::modifiers_directiveName}
        {::directiveName}
        {«»::directiveName}
        {«»::modifiers_directiveName}
<
Where «» is whatever |g:MessageFormatter_jumpMarker| is set to.

                                  *g:MessageFormatter_highlightDirectivesLink*

Defaults to "Error". The syntax item to which the directives are linked for
highlighting.

                          *g:MessageFormatter_highlightDirectiveModifiersLink*

Defaults to "Constant". The syntax item to which the directive modifiers are
linked for highlighting.


                                     *g:MessageFormatter_moveArgumentsToStart*

If 1 (the default), then all input arguments are moved to the beginning of the
expression when using |<Plug>PlaceTemplateInText|. For example, this template >
        Addlocaltemplate + let {::c_var} += {def 1::increment}
<
will expand to >
        {|::n_var}{«»::n_override-increment}let {c_var} += {increment}{eval {p_override-increment} == '' ? {1::p_default-increment} : {p_override-increment}::n_increment}
<
placing both "var" and the override for the default value for "increment" at
the very beginning of the template, making it easier to enter the values. As
before, the default parameters come after the non-default ones and are
characterized by their names being prefixed with the word "override" (the
actual default value can be seen later as it is prefixed with the word
"default").

For the sake of comparison, if the option is 0, this is what the template
expands to: >
        let {|::c_var} += {increment}{eval {«»::p_override-increment} == '' ? {1::p_default-increment} : {p_override-increment}::n_increment}
<
The end result is exactly the same, but the parameters are now in the middle
of the expression as entered when defining the template instead of at the
beignning.

In both cases, | marks the location of the cursor.

Note that this option has no bearing when using |<Plug>PlaceTemplateForLine|
because the expansion there isn't done inline, anyway.


==============================================================================
MAPPINGS                                           *MessageFormatter_Mappings*

                                                 *<Plug>FormatCurrentTemplate*

This is both a normal mode and an insert mode mapping; it expands the last
inline template placed by |<Plug>PlaceTemplateInText|, as long as the cursor is
within the range of lines placed by the mapping.

If invoked from insert mode, the cursor is moved to the very end of the last
line in the template and left in insert mode. From normal mode, the cursor
remains where it was, leaving you in normal mode. (I almost always type the
last value and hit the hotkey straight from insert mode and then continue
typing.)

Default mapping: <c-del> (both insert and normal mode)

                                                   *<Plug>PlaceTemplateInText*

Given a template name as the WORD (including special characters) on the cusor,
replaces it with the expansion; if the expansion isn't found, it's replaced
with itself, wrapped in exclamation marks, so "adsfasdfadsf" becomes
"!adsfasdfadsf!". You can then hit undo do get to the original and spell it
correctly, if that's what happened.

Default mapping: <Leader><Leader> (insert mode only)

                                                  *<Plug>PlaceTemplateForLine*

Given a line containing nothing but a template name and parameter values, will
replace the line with the fully expanded template. The arguments should be
separated by |g:MessageFormatter_parameterSeparator| or, if the arguments are
single words (themselves contain no whitespace) they may be separated by a
single space to ease data entry. If a truly blank value is desired for any of
the parameters, use |g:MessageFormatter_blankParameter| as the value.

This is probably the most commonly used mapping of the entire plugin, after
templates have been defined, though |<Plug>PlaceTemplateInText| definitely has
its place where inline templates are desired, as this mapping commandeers the
entire line.

Default mapping: `` (two back-ticks; insert mode only)

                                                         *<Plug>FormatOneLine*

Expands the current cursor line as if it were a template, even if it was laid
down manually. For example, if you have >
        public String {my variable::c_var} = {q_var};
<
and you hit the hotkey, you get >
        public String myVariable = "my variable";
<
Default mapping: <c-del><c-del> (normal mode only)

                                                     *<Plug>FormatVisualRange*

The big cousin of |<Plug>FormatOneLine|; does the same thing, except for a
visually selected range of lines. Useful for ad-hoc templates comprising
multiple lines where the variable may appear on multiple lines. For example, >
        /**
         * Constant defining for {my variable::c_var}.
         */
        public static String {C_var} = {wq_var};
<
gives >
        /**
         * Constant defining for myVariable.
         */
        public static String MY_VARIABLE = "my variable";
<

Default mapping: <c-del> (visual mode only)

                                                  *<Plug>FormatOpModeTemplate*

Same thing as |<Plug>FormatVisualRange|, except it works in operator-pending
mode. In the above example, if the cursor were on the first line ("/**"), you
could hit the hotkey for <Plug>FormatOpModeTemplate followed by 3j to achieve
the same effect.

Default mapping: <c-s-del> (normal mode only)

                                 *<Plug>MessageFormatter_InsertModeCompletion*

Invokes user-defined insert mode custom completion (|compl-function|) and
completes template names; the popup menu contains the template definitions for
quick reference, also.

Default mapping: // (insert mode only)


Note:   |<Plug>PlaceTemplateInText| looks only at the current word so is useful
        for templates that are meant to be used as part of a whole line (look
        at "safetern" in the examples), although it can be used for multi-line
        templates, also. Conversely, |<Plug>PlaceTemplateForLine| looks at the
        entire line because it expects all the parameter values to be provided
        up front.


==============================================================================
COMMANDS                                           *MessageFormatter_Commands*

                                                           *Addglobaltemplate*

Adds a global template that's available everywhere; for example >
        Addglobaltemplate const /**\n* Constant defining for {::c_var}.\n*/\npublic static String {C_var} = {wq_var};
<
The template is invoked by typing "const" and hitting the hotkey for inline
expansion (|<Plug>PlaceTemplateInText|) or by typing "const" followed by
arguments and hitting the hotkey for automatic expansion
(|<Plug>PlaceTemplateForLine|).

                                                            *Addlocaltemplate*

Same thing as |Addglobaltemplate|, except it uses buffer variables to store the
template so it's only available for this buffer.

Useful for ftplugin settings.
                                                         *Listglobaltemplates*

Simple list of global template name.

                                                          *Listlocaltemplates*

Simple list of local template name.

                                                           *FormatVisualRange*

Expands a range of text lines in the buffer containing default values for the
parameters; best called from mappings rather than directly, though you can
select a range of lines and call it on that (|<Plug>FormatVisualRange| does just
that, in fact).

                                                          *Setcolordirectives*

Takes one argument (1 or 0); if 1, enables the highlighting of directives (see
g:MessageFormatter_highlightDirectives|) in text when placed through
|<Plug>PlaceTemplateInText| or manually for one-time expansion.


==============================================================================
PATTERNS                                           *MessageFormatter_Patterns*

                                                   *MessageFormatter_example1*

The examples (loaded unless |g:MessageFormatter_createDefaultTemplates| is set
to 0 in your vimrc) define some fairly complex templates. Dissecting one: >
        Addglobaltemplate var {::type} {::c_var} = new {eval {p_type} =~# '^List' ? 'Array{type}' : {p_type} =~# '^Map' ? 'Hash{type}' : {p_type}::instanceType}();
<
Template name:       var
Number of arguments: 2 ("type" and "var"); defined by the {::...} format

Template particulars:

{::type}:
        get value for "type" and use as is.
{::c_var}:
        get value for "var" and camel-case it.
{eval {p_type} =~# '^List' ? 'Array{type}' : {p_type} =~# '^Map' ? 'Hash{type}' : {p_type}::instanceType}:
        variable "instanceType" is given an "eval" value,

This gets evaluated as a ternary expression:
        {p_type} =~# '^List' ? 'Array{type}' : {p_type} =~# '^Map' ? 'Hash{type}' : {p_type}

        If the value, wrapped in single quotes (p_type; suitable for use in a
        Vim expression), starts with List, instantiate it as an ArrayList; if
        it starts with Map, instantiate it has a HashMap; otherwise, use as
        is. (List and Map are interfaces in Java and can't be instantiated
        directly).

This allows you to to type >
        var List<String> names
<

And hit the hotkey for |<Plug>PlaceTemplateForLine| (see the mapping for more
details) in insert mode to get >
        List<String> names = new ArrayList<String>();
<
                                                   *MessageFormatter_example2*

Another one: >
        Addglobaltemplate do do\n{\n!jump!\n} while ( !jump! );
<
Type "do" and hit the mapping for |<Plug>PlaceTemplateInText| and it will
replace the word with the expansion in place (can be used with "var", also),
moving the cursor to the first !jump! And replacing the other !jump! with jump
characters.

If the |<Plug>PlaceTemplateInText| mapping is used for expansions such as "var"
above, the cursor goes to the first {::...} variable and all others change to
{!jump!::...} so a jump hotkey (assuming there is a jumper plugin installed)
will move from one to the next. Once the values have been entered, hit the
hotkey for |<Plug>FormatCurrentTemplate| (insert or normal mode) and the
template will be expanded inline. The plugin remembers the last template
placed, so if a second template is placed before the first is expanded, the
first will be forgotten.


==============================================================================
PATTERN MODIFIERS                          *MessageFormatter_PatternModifiers*

Modifiers are supplied to prior to the variable name and are of the format >
        {modifiers_variableName}
        {::modifiers_variableName}
        {default value::modifiers_variableName}
<

Multiple modifiers are permitted and are processed in the order entered, so
"tl" will first title case and then lower-case (resulting in all lower-case)
while "lt" will do it the other way around.

    Modifier  Meaning
    --------  -----------------------------------------------------------
       a      repeats value as is (optional)
       c      camelCase
       C      CONSTANT_CASE
       e      escapes quotes and backslashes
       f      Capitalizes the first letter
       l      converts the entire thing to lower-case
       m      followed by a number, repeats string n times (default 1)
       n      suppresses output; useful for ensuring variable entry order
       o      if the argument is non-empty, prepends a comma and a space
       p      wraps argument in apostrophes, escaping inner apostrophes
       P      Same as "p", except that it doesn't modify empty values
       q      wraps argument in double quotes, escaping it as for "e"
       Q      Same as "q", except that it doesn't modify empty values
       s      if the argument is non-empty, wraps it in spaces
       t      Title Cases The Entire Argument
       u      UPPER CASES THE ARGUMENT
       w      changes "helloThere" or "HELLO_THERE" to "hello there"


                                    *MessageFormatter_patternModifierExamples*

Here are some examples:

                  Argument             Result
                  -------------------  --------------------
                  {john smith::c_var}  johnSmith
                  {john smith::C_var}  JOHN_SMITH
                  {john smith::t_var}  John Smith
                  {!@::m10_var}        !@!@!@!@!@!@!@!@!@!@
                  {++::m5q_var}        "++++++++++"


==============================================================================
NOTES                                                 *MessageFormatter_Notes*

- Patterns replace all \n instances (backslashes followed by 'n') with
  newlines and all !jump! occurrences with the value of
  MessageFormatter_jumpMarker.

                                                         *MessageFormatter_CR*

- Patterns replace all instances of "<CR>" (case-sensitive and without the
  quotes) with newlines AT THE VERY END OF PROCESSING. This allows "eval"
  expressions to result in multiple lines. Note that the indentation may break
  here because this uses 'paste' to make sure lines are placed in as they are
  found.

                                                         *MessageFormatter_SW*

- Similarly, patterns replace all instances of "<SW>" with 'shiftwidth'
  spaces; this can be used to reset indentation in case the use of "<CR>"
  above breaks indentation.

- Template definitions are searched locally and then globally, thus a local
  template with the same name will always be used instead of the global one.


==============================================================================
SPECIAL VALUES                                *MessageFormatter_SpecialValues*

If the value for a particular parameter begins with one of these, it gets
treated differently:

                                                       *MessageFormatter_eval*

- "eval ": Whatever follows is executed as a Vim expression and the return
  value from that is used as the actual value. For example, >
        {eval strpart( {::p_name}, 0, 3 )::u_shortName}
<
  will produce, assuming "name" is "John" (the "u" convets it to upper-case): >
        JOH
<
                                                        *MessageFormatter_ask*

- "ask": Puts up an input prompt, asking for the value of the the parameter
  interactively; if something follows the "ask", it is used as the default
  value for the input. For example, >
        {ask {::lName}, {::fName}::t_fullName}
<
  prompts for the value, of the full name, using "lName, fName" as the
  default. (The "t" converts it to title-case, allowing inputs such as
  "smith" and "john".)

Both forms allow the embedding of further parameters within recursively; you
could even put further "ask" prompts within (for lName and fName above, for
example).

                                                        *MessageFormatter_def*

- "def ": The remainder of the value is treated as a default value; that is,
  if the user passes in nothing for the particular parameter (or, with
  |<Plug>PlaceTemplateForLine|, using |g:MessageFormatter_blankParameter|),
  this value is used instead. For example, >
        Addlocaltemplate for {{def i::c_var}::n_cVar}for ( int {cVar} = {def 0::start}; {cVar} < {::c_limit}; {cVar}++ )\n{\n«»\n}«»
<
  This is a simplistic example, but it default to i and 0, respectively, for
  "var" and "start" if nothing is passed in for those variables.

  The system supports recursive use of default values; so, this will work: >
        Addlocaltemplate test {def {def john::t_fName} {def smith::t_lName}::t_fullName}
<
  Note that this example accepts up to three arguments (fName, lName and
  fullName); setting them to the empty value
  (|g:MessageFormatter_blankParameter|) is the same as using the default.

  Default values aren't required; for example, from before: >
        Addlocaltemplate for {{def i::c_var}::n_cVar}for ( int {cVar} = {def 0::start}; {cVar} < {::c_limit}; {cVar}++ )\n{\n«»\n}«»
<
  This template may be expanded by simply >
        for 20
<
  as only the "limit" variable is required.

  Note that the order in which the variables are defined in the template is
  considered a relative order; in reality, all the supplied arguments are
  applied to the non-default parameters before they are applied to the default
  parameters. In this example, if all the values are to be provided, then it
  has to look like this: >
        for  20  counter  3
<
  This might seem counterintuitive as the required value is, in fact, provided
  last.

                                                   *MessageFormatter_emptyDef*

An empty default value should be specified as >
        {def ::someVar}
<
Note the space between the "def" and the "::"; simply using >
        {def::someVar}
<
sets the value of "someVar" as "def".

                                                        *MessageFormatter_tem*

  - "tem ": The remainder of the value is taken to be the name of another
    template and is replaced with the expansion of that. For example, given
    these three templates: >
        Addlocaltemplate c {::c_arg}
        Addlocaltemplate C {::C_arg}
        Addlocaltemplate cf {::cf_arg}
<
    We can now define this template: >
        Addlocaltemplate a {tem c::u_a} {tem C::a}
<
    Note that the variable modifiers and name aren't used (the "u_a" and "a"
    don't matter, though they are required--you may make them all the same).

    Recursion is supported, so another template that uses "a" may be defined: >
        Addlocaltemplate b {tem cf::a} {tem a::a}
<
    Now, calling "b": >
        b  this is neat
<
    results in >
        ThisIsNeat thisIsNeat THIS_IS_NEAT
<
    Note also that inner templates that use the same variable name ("arg") get
    consolidated so it needs to be specified only once (ending up with only
    one required argument, not three); thus, the inline expansion of "b"
    (using |<Plug>PlaceTemplateInText|) gives >
        {|::n_arg}{cf_arg} {c_arg} {C_arg}«»
<
    (You end up in insert mode, with the cursor location indicated by the |.)

                                                        *MessageFormatter_iab*

  - "iab ": Expands the specified insert-mode abbreviation (see |:iabbrev|);
    for example, if the following abbreviation has been defined: >
        iab js John Smith
<
    then, this snippet: >
        {iab js::name}
<
    gets expanded to: >
        {John Smith::name}
<
    This may be recursive, so the following works (the inner abbreviation
    expands to "js" which is recursively expanded to "John Smith"): >
        iab test js
        {iab {iab test::inner}::name}
<

==============================================================================
TIPS                                                   *MessageFormatter_Tips*

- To get snake_case_variable_name type variables while starting with "snake
  case variable name", use "Cl" as the modifier (convert to
  A_CONSTANT_TYPE_VARIABLE and then lower-case the whole thing). >
        {::Cl_var}
<

- Similarly, to get ClassName type variables from "class name", use "cf" as
  the modifier (camel case to get "className" and then capitalize the first
  letter). >
        {::cf_var}
<

                                    *MessageFormatter_parameterExpansionOrder*

- Templates with default variables apply parameters in this order:

  - First, all non-optional (non-default value-supplied) variables are
    fulfilled in the order they are seen.

  - Any remaining parameters are then applied to the default varaibles, also
    in the order they are seen.

  To illustrate with an example, take this template: >
        Addlocaltemplate test First name: {def john::t_fName}, last name: {::t_lName}, middle initial: {::u_middleInitial} and age: {def 25::age}.
<
  The arguments for this are provided as: >
        test lName middleInitial fName age
<
  The two required arguments come first and the two optional arguments come
  second. This cannot be changed. However, if the order of the two required
  arguments needs to be reversed (maybe the middle initials make sense before
  the last name), redefine the template as such: >
        Addlocaltemplate test {::n_middleInitial}{::n_lName}First name: {def john::t_fName}, last name: {t_lName}, middle initial: {u_middleInitial} and age: {def 25::age}.
<
  The "n" modifier causes the value to be defined, but not displayed. The same
  trick can be used for the default parameters to change their order as
  desired, but again, the required parameters will be fulfilled first
  irrespective of how they are defined in the template.

  With or without default variables, recursive parameters are expanded with
  the most deeply nested one first to allow outer ones to use the value
  specified; for example: >
        {ask {ask::fName} {ask::lName}::fullName} (first name {fName}, last name {lName}
<
  The above asks for "fName" first, then "lName" and, finally, for "fullName",
  using the values for the first two as the default for the last.


==============================================================================
EXAMPLES                                           *MessageFormatter_Examples*

Here are some 'filetype' specific templates that might be useful (for placing
in the appropriate |ftplugin| files).

  - Java for loop (only one required parameter: the end value) >
        Addlocaltemplate for {{def i::c_var}::n_cVar}for ( int {cVar} = {def 0::start}; {cVar} {def <::compare} {::c_limit}; {cVar}++ )\n{\n!jump!\n}!jump!
<
  - JavaScript function definition (requires only the function name, which
    gets camel-cased automatically) >
        Addlocaltemplate fun function {::c_functionName} ({def ::s_args})\n{\n«»\n}
<
  - Vim plugin default mapping specification (requires the mapping expression
    and the default mapping; optionally takes the mode, defaulting that to
    "n") >
        Addlocaltemplate mapping if ( !hasmapto( '<Plug>{::mapExpression}', '{def n::mode}' ) )\n{mode}map <silent> {::defaultMapping} <Plug>{mapExpression}\nendif
<
  - Vim plugin default option specification (takes the variable name and
    value) >
        Addlocaltemplate option if ( !exists( "g:{::var}" ) )\nlet g:{var} = {::value}\nendif
<
  - Vim expression to add a specified value to a variable (takes the variable
    name, camcel casing it automatically and an optional increment) >
        Addlocaltemplate + let {::c_var} += {def 1::increment}
<
  - Vim expression to make variable assignment (slightly) easier (for those
    not used to typing "let" first); camel-cases only the left half because
    the right might be an expression: >
        Addlocaltemplate = let {::c_a} = {::b}
<
  - Vim version of a for loop (takes the name of the variable and the terminal
    value): >
        Addlocaltemplate for let {::c_var} = 0\n\nwhile ( {c_var} < {::terminalValue} )\n«»\n\nlet {c_var} += 1\nendwhile
<
  - XHTML input tag; takes the name of the input component, optionally taking
    a type and value (defaults to "text" and no value, respectively); if no
    value is provided, the value attribute is suppressed altogether: >
        Addlocaltemplate input <input type={def text::q_type} id={::q_id} name={q_id} {def ::n_value}{eval {p_value} == '' ? '' : {value="{e_value}"::p_valueAttribute}::val}/>
<

 vim:tw=78:ts=8:ft=help:norl:sw=8:et
